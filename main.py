import asyncio
import logging
import sys
from os import getenv
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram import types
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, ChatInviteLink
from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession
from sqlalchemy.orm import sessionmaker
from sqlalchemy import select
from sqlalchemy.dialects.postgresql import insert
from db import Base, User
from datetime import date, timedelta



load_dotenv()

BOT_TOKEN = getenv("BOT_TOKEN")
GROUP_ID = getenv("GROUP_ID")
GROUP_NAME = getenv("GROUP_NAME")
PAYMENT_PROVIDER_TOKEN = getenv("PAYMENT_PROVIDER_TOKEN")
POSTGRES_USER = getenv("POSTGRES_USER")
POSTGRES_PASSWORD = getenv("POSTGRES_PASSWORD")
POSTGRES_DB = getenv("POSTGRES_DB")
POSTGRES_HOST = getenv("POSTGRES_HOST")
DATABASE_URL = f"postgresql+asyncpg://{POSTGRES_USER}:{POSTGRES_PASSWORD}@{POSTGRES_HOST}/{POSTGRES_DB}"

bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()
engine = create_async_engine(DATABASE_URL, echo=True)
async_session = sessionmaker(bind=engine, expire_on_commit=False, class_=AsyncSession)



@dp.message(Command(commands=["start", "–∫–æ–º–∞–Ω–¥—ã"]))
async def show_commands(message: types.Message):
    commands_kb = ReplyKeyboardMarkup(
        keyboard=[
            [
                KeyboardButton(text="/id"),
                KeyboardButton(text="/—Å–ø—Ä–∞–≤–∫–∞"),
            ],
            [
                KeyboardButton(text="/–ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏"),
                KeyboardButton(text="/–∫–æ–º–∞–Ω–¥—ã"),
            ],
        ],
        resize_keyboard=True
    )

    text = (
        "C–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:\n"
        "/id ‚Äî –£–∑–Ω–∞—Ç—å ID —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞ –∏–ª–∏ –≥—Ä—É–ø–ø—ã\n"
        "/—Å–ø—Ä–∞–≤–∫–∞ ‚Äî –ü–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É –æ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏\n"
        f"/–ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ ‚Äî –ù–∞—á–∞—Ç—å –æ–ø–ª–∞—Ç—É –∏ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ —Å—Å—ã–ª–∫—É –Ω–∞ {GROUP_NAME}\n"
        "/–∫–æ–º–∞–Ω–¥—ã ‚Äî –£–∑–Ω–∞—Ç—å –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã"
    )
    await message.answer(text, reply_markup=commands_kb)


@dp.message(Command(commands=["id"]))
async def get_chat_id(message: Message):
    chat_id = message.chat.id
    chat_type = message.chat.type
    await message.reply(f"üí¨ ID —á–∞—Ç–∞: `{chat_id}`\nüì¶ –¢–∏–ø: `{chat_type}`", parse_mode="Markdown")


@dp.message(Command(commands=["—Å–ø—Ä–∞–≤–∫–∞"]))
async def show_user_info(message: Message) -> None:
    username = message.from_user.username
    chat_id = message.chat.id

    async with async_session() as session:
        result = await session.execute(select(User).where(User.tg_username == username))
        user = result.scalars().first()
       
    if user and user.sub_expire_date and user.sub_expire_date > date.today():
        await bot.send_message(
            chat_id=chat_id,
            text=(
                f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, <b>{username}</b>!üëã\n\n"
                f"–î–∞—Ç–∞ –∏—Å—Ç–µ–∫–∞–Ω–∏—è –≤–∞—à–µ–≥–æ —Å—Ä–æ–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏: <b>{user.sub_expire_date}</b>.\n"
                "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å –µ—â–µ –Ω–∞ –º–µ—Å—è—Ü - –≤–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /–ø—Ä–æ–¥–ª–∏—Ç—å.\n"
            ),
            parse_mode="HTML"
        )
    else:
        try:
            is_expire_date_valid = user.sub_expire_date
        except:
            is_expire_date_valid = False

        await bot.send_message(
            chat_id=chat_id,
            text=(
                f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, <b>{username}</b>!üëã \n\n"
                f"–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –≥—Ä—É–ø–ø–µ <b>{GROUP_NAME}</b>.\n"
                f"–î–∞—Ç–∞ –∏—Å—Ç–µ–∫–∞–Ω–∏—è –≤–∞—à–µ–π –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏ - {is_expire_date_valid if is_expire_date_valid else "–í—ã –Ω–∏ —Ä–∞–∑—É –Ω–µ –≤—Å—Ç—É–ø–∞–ª–∏ –≤ –≥—Ä—É–ø–ø—É.\n"}"
                "–•–æ—Ç–∏—Ç–µ —Å—Ç–∞—Ç—å —á–∞—Å—Ç—å—é –Ω–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ –∏ –ø–æ–ª—É—á–∏—Ç—å –≤–µ—Å—å –º–∞—Ç–µ—Ä–∏–∞–ª –ø–æ –∫—É—Ä—Å–∞–º?\n"
                "–í–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /–ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –¥–ª—è –æ–ø–ª–∞—Ç—ã.\n"
                "–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –≥—Ä—É–ø–ø—É."
            ),
            parse_mode="HTML"
        )


@dp.message(Command(commands=["–ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏"]))
async def sub_payment_test(message: Message):
    username = message.from_user.username
    expire_date = date.today() + timedelta(days=40)
    
    is_payment_successfull = True ##TODO: actual payment

    if not is_payment_successfull:
        await message.reply(f"–û—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã.")
    else:
        async with async_session() as session:
            query = insert(User).values(
                tg_username=username,
                sub_expire_date=expire_date
            ).on_conflict_do_update(
                index_elements=["tg_username"],  
                set_={"sub_expire_date": expire_date}
            )

            try:
                await session.execute(query)
                await session.commit()
                
                try:
                    invite_link: ChatInviteLink = await bot.create_chat_invite_link(
                                    chat_id=GROUP_ID,
                                    member_limit=1,
                                    creates_join_request=False, 
                                    name=f"–î–ª—è @{message.from_user.username}"
                    )
                    await message.reply(f"–í–∞—à–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è —Å—Å—ã–ª–∫–∞:\n{invite_link.invite_link}")
                except Exception as e:
                        await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏: {e}")

                await message.answer(f"‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –¥–æ {expire_date} –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞!")

            except Exception as e:
                await session.rollback()
                await message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –ø–ª–∞—Ç–µ–∂–µ.")
                print(f"DB error: {e}")



async def init_models():
    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.create_all)


async def main() -> None:
    await init_models()
    await dp.start_polling(bot)


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    asyncio.run(main())